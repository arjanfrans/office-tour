{"version":3,"sources":["Game/Entity/Player.ts","Game/TiledMap/MapParser.ts","Game/PlayerView.ts","Game/World.ts","Game/index.tsx","index.tsx"],"names":["Player","engine","options","view","width","height","collisionType","CollisionType","Active","speed","_direction","DIRECTION_DOWN","this","ctx","delta","update","input","keyboard","isHeld","Input","Keys","Up","vel","y","DIRECTION_UP","wasReleased","Down","Right","x","DIRECTION_RIGHT","Left","DIRECTION_LEFT","Actor","MapParser","data","layers","Map","objects","layerData","set","name","parseObjectLayers","layer","get","playerData","PLAYER_NAME","Error","values","type","OBJECT_LAYER","object","TILE_LAYER","PlayerView","player","texture","upAnimation","leftAnimation","rightAnimation","downAnimation","idleDownSprite","idleUpSprite","idleLeftSprite","idleRightSprite","spriteSheet","SpriteSheet","getAnimationByIndices","ANIMATION_SPEED","getSprite","addDrawing","setDrawing","direction","World","level1","spriteSheets","playerTexture","TiledResource","Texture","tileMap","getTileMap","parseMap","add","getData","getPlayer","Game","ex","canvasElementId","world","loader","Loader","getLoadableResources","start","init","id","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e2ef8e98.chunk.js","sourcesContent":["import { Actor, CollisionType, Engine, Input } from \"excalibur\";\nimport { PlayerView } from \"../PlayerView\";\n\ninterface IPlayerOptions {\n    x: number;\n    y: number;\n}\n\nexport class Player extends Actor {\n    get direction(): string {\n        return this._direction;\n    }\n\n    private readonly speed: number = 100;\n    public static DIRECTION_UP: string = \"up\";\n    public static DIRECTION_DOWN: string = \"down\";\n    public static DIRECTION_RIGHT: string = \"right\";\n    public static DIRECTION_LEFT: string = \"left\";\n\n    private _direction: string = Player.DIRECTION_DOWN;\n\n    constructor(\n        private engine: Engine,\n        options: IPlayerOptions,\n        public view?: PlayerView\n    ) {\n        super({\n            ...options,\n            width: 20,\n            height: 20,\n            collisionType: CollisionType.Active,\n        });\n    }\n\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\n        if (this.view) {\n            this.view?.update();\n        }\n\n        super.draw(ctx, delta);\n    }\n\n    public update(engine: Engine, delta: number) {\n        if (engine.input.keyboard.isHeld(Input.Keys.Up)) {\n            this.vel.y = -this.speed;\n            this._direction = Player.DIRECTION_UP;\n        } else if (engine.input.keyboard.wasReleased(Input.Keys.Up)) {\n            this.vel.y = 0;\n        }\n\n        if (engine.input.keyboard.isHeld(Input.Keys.Down)) {\n            this.vel.y = this.speed;\n            this._direction = Player.DIRECTION_DOWN;\n        } else if (engine.input.keyboard.wasReleased(Input.Keys.Down)) {\n            this.vel.y = 0;\n        }\n\n        if (engine.input.keyboard.isHeld(Input.Keys.Right)) {\n            this.vel.x = this.speed;\n            this._direction = Player.DIRECTION_RIGHT;\n        } else if (engine.input.keyboard.wasReleased(Input.Keys.Right)) {\n            this.vel.x = 0;\n        }\n\n        if (engine.input.keyboard.isHeld(Input.Keys.Left)) {\n            this.vel.x = -this.speed;\n            this._direction = Player.DIRECTION_LEFT;\n        } else if (engine.input.keyboard.wasReleased(Input.Keys.Left)) {\n            this.vel.x = 0;\n        }\n\n        super.update(engine, delta);\n    }\n}\n","import { Engine } from \"excalibur\";\nimport { Player } from \"../Entity/Player\";\n\ninterface IObject {\n    gid: number;\n    height: number;\n    id: number;\n    name: string;\n    rotation: number;\n    type: string;\n    visible: boolean;\n    width: number;\n    x: number;\n    y: number;\n}\n\ninterface ILayer {\n    name: string;\n    type: string;\n    objects?: Array<IObject>;\n}\n\nexport class MapParser {\n    public static OBJECT_LAYER: string = \"objectgroup\";\n    public static TILE_LAYER: string = \"tilelayer\";\n    public readonly layers: Map<string, ILayer> = new Map<string, ILayer>();\n    private objects: Map<string, IObject> = new Map<string, IObject>();\n\n    public static PLAYER_NAME = \"player\";\n\n    constructor(private readonly engine: Engine, private data: any) {\n        for (const layerData of data.layers) {\n            this.layers.set(layerData.name, layerData);\n        }\n\n        this.parseObjectLayers();\n    }\n\n    public getLayer(name: string): ILayer | null {\n        const layer = this.layers.get(name);\n\n        return layer ? layer : null;\n    }\n\n    public getPlayer(): Player {\n        const playerData = this.objects.get(MapParser.PLAYER_NAME);\n\n        if (!playerData) {\n            throw new Error(\"No Player found in map.\");\n        }\n\n        return new Player(this.engine, {\n            x: playerData.x,\n            y: playerData.y,\n        });\n    }\n\n    private parseObjectLayers(): void {\n        for (const layer of this.layers.values()) {\n            if (layer.type === MapParser.OBJECT_LAYER && layer.objects) {\n                for (const object of layer.objects) {\n                    this.objects.set(object.name, object);\n                }\n            }\n        }\n    }\n}\n","import { Player } from \"./Entity/Player\";\nimport { Animation, Engine, Sprite, SpriteSheet, Texture } from \"excalibur\";\n\nexport class PlayerView {\n    private readonly upAnimation?: Animation;\n    private readonly leftAnimation?: Animation;\n    private readonly rightAnimation?: Animation;\n    private readonly downAnimation?: Animation;\n    private readonly idleDownSprite: Sprite;\n    private readonly idleUpSprite: Sprite;\n    private readonly idleLeftSprite: Sprite;\n    private readonly idleRightSprite: Sprite;\n    private static ANIMATION_SPEED = 100;\n\n    constructor(\n        private readonly engine: Engine,\n        private readonly player: Player,\n        private texture: Texture\n    ) {\n        const spriteSheet = new SpriteSheet(this.texture, 3, 4, 16, 16);\n\n        this.downAnimation = spriteSheet.getAnimationByIndices(\n            this.engine,\n            [0, 1, 2],\n            PlayerView.ANIMATION_SPEED\n        );\n        this.leftAnimation = spriteSheet.getAnimationByIndices(\n            this.engine,\n            [3, 4, 5],\n            PlayerView.ANIMATION_SPEED\n        );\n        this.rightAnimation = spriteSheet.getAnimationByIndices(\n            this.engine,\n            [6, 7, 8],\n            PlayerView.ANIMATION_SPEED\n        );\n        this.upAnimation = spriteSheet.getAnimationByIndices(\n            this.engine,\n            [9, 10, 11],\n            PlayerView.ANIMATION_SPEED\n        );\n        this.idleDownSprite = spriteSheet.getSprite(1);\n        this.idleLeftSprite = spriteSheet.getSprite(4);\n        this.idleRightSprite = spriteSheet.getSprite(7);\n        this.idleUpSprite = spriteSheet.getSprite(10);\n\n        this.player.addDrawing(\"up\", this.upAnimation);\n        this.player.addDrawing(\"left\", this.leftAnimation);\n        this.player.addDrawing(\"right\", this.rightAnimation);\n        this.player.addDrawing(\"down\", this.downAnimation);\n        this.player.addDrawing(\"idleUp\", this.idleUpSprite);\n        this.player.addDrawing(\"idleDown\", this.idleDownSprite);\n        this.player.addDrawing(\"idleRight\", this.idleRightSprite);\n        this.player.addDrawing(\"idleLeft\", this.idleLeftSprite);\n\n        this.player.setDrawing(\"idleDown\");\n    }\n\n    public update(): void {\n        if (this.player.vel.x > 0) {\n            this.player.setDrawing(\"right\");\n        } else if (this.player.vel.x < 0) {\n            this.player.setDrawing(\"left\");\n        } else if (this.player.vel.y > 0) {\n            this.player.setDrawing(\"down\");\n        } else if (this.player.vel.y < 0) {\n            this.player.setDrawing(\"up\");\n        } else {\n            if (this.player.direction === Player.DIRECTION_UP) {\n                this.player.setDrawing(\"idleUp\");\n            } else if (this.player.direction === Player.DIRECTION_DOWN) {\n                this.player.setDrawing(\"idleDown\");\n            } else if (this.player.direction === Player.DIRECTION_LEFT) {\n                this.player.setDrawing(\"idleLeft\");\n            } else {\n                this.player.setDrawing(\"idleRight\");\n            }\n        }\n    }\n}\n","import { Engine, Loadable, SpriteSheet, Texture } from \"excalibur\";\nimport { TiledResource } from \"@excaliburjs/excalibur-tiled\";\nimport { MapParser } from \"./TiledMap/MapParser\";\nimport { PlayerView } from \"./PlayerView\";\n\nexport class World {\n    private readonly level1: TiledResource;\n    private readonly spriteSheets: Map<string, SpriteSheet> = new Map<\n        string,\n        SpriteSheet\n    >();\n    private readonly playerTexture: Texture;\n\n    constructor(private engine: Engine) {\n        this.level1 = new TiledResource(\"/assets/maps/level1.json\");\n        this.playerTexture = new Texture(\"/assets/characters/player.png\");\n    }\n\n    public init(): void {\n        const tileMap = this.level1.getTileMap();\n\n        this.parseMap();\n\n        this.engine.add(tileMap);\n    }\n\n    private parseMap(): void {\n        const data = this.level1.getData();\n\n        const mapParser = new MapParser(this.engine, data);\n        const player = mapParser.getPlayer();\n\n        player.view = new PlayerView(this.engine, player, this.playerTexture);\n\n        this.engine.add(player);\n    }\n\n    public getSpriteSheet(name: string): SpriteSheet | null {\n        const spriteSheet = this.spriteSheets.get(name);\n\n        return spriteSheet ? spriteSheet : null;\n    }\n\n    public getLoadableResources(): Array<Loadable> {\n        return [this.level1, this.playerTexture];\n    }\n}\n","import * as ex from 'excalibur'\nimport {Loader} from 'excalibur'\nimport React from \"react\";\nimport {World} from \"./World\";\n\nexport class Game extends React.Component<{}, {}>{\n    public async componentDidMount(): Promise<void>\n    {\n        const engine = new ex.Engine({\n            width: 800,\n            height: 600,\n            canvasElementId: 'game',\n        });\n\n        const world = new World(engine);\n        const loader = new Loader(world.getLoadableResources());\n\n        await engine.start(loader);\n\n        world.init();\n    }\n\n    public render(): React.ReactNode\n    {\n        return <canvas id=\"game\"/>\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {Game} from \"./Game\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Game />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}