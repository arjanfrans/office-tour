{"version":3,"sources":["Game/Entity/Player.ts","Game/Entity/DialogTrigger.ts","Game/TiledMap/MapParser.ts","Game/PlayerView.ts","Game/UI/ContactDialogView.ts","Game/World.ts","config.ts","Game/index.tsx","index.tsx"],"names":["Player","engine","config","view","collisionType","CollisionType","Active","speed","_direction","DIRECTION_DOWN","this","ctx","delta","update","input","keyboard","isHeld","Input","Keys","Up","vel","y","DIRECTION_UP","wasReleased","Down","Right","x","DIRECTION_RIGHT","Left","DIRECTION_LEFT","Actor","DialogTrigger","dialogView","body","collider","type","Passive","on","event","other","visible","_engine","MapParser","data","layers","Map","objects","collisions","layerData","set","name","parseObjectLayers","layer","get","actors","values","collision","push","width","height","Fixed","dialogViews","dialogTriggers","object","Error","dialogTrigger","playerData","PLAYER_NAME","OBJECT_LAYER","startsWith","id","toString","TILE_LAYER","PlayerView","player","texture","upAnimation","leftAnimation","rightAnimation","downAnimation","idleDownSprite","idleUpSprite","idleLeftSprite","idleRightSprite","spriteSheet","SpriteSheet","getAnimationByIndices","ANIMATION_SPEED","getSprite","addDrawing","setDrawing","direction","ContactDialogView","nameLabel","emailLabel","Label","email","add","ScreenElement","World","level1","spriteSheets","playerTexture","TiledResource","Texture","tileMap","getTileMap","parseMap","getData","mapParser","getPlayer","contact","getDialogTriggers","currentScene","getCollisionActors","collisionActor","CONFIG","social","instagram","programming","github","Game","ex","canvasElementId","world","loader","Loader","getLoadableResources","start","init","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.479cc2ff.chunk.js","sourcesContent":["import {Actor, ActorArgs, CollisionType, Engine, Input} from \"excalibur\";\nimport { PlayerView } from \"../PlayerView\";\n\nexport class Player extends Actor {\n    get direction(): string {\n        return this._direction;\n    }\n\n    private readonly speed: number = 100;\n    public static DIRECTION_UP: string = \"up\";\n    public static DIRECTION_DOWN: string = \"down\";\n    public static DIRECTION_RIGHT: string = \"right\";\n    public static DIRECTION_LEFT: string = \"left\";\n\n    private _direction: string = Player.DIRECTION_DOWN;\n\n    constructor(\n        private engine: Engine,\n        config: ActorArgs,\n        public view?: PlayerView\n    ) {\n        super({\n            ...config,\n            collisionType: CollisionType.Active,\n        });\n    }\n\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\n        if (this.view) {\n            this.view?.update();\n        }\n\n        super.draw(ctx, delta);\n    }\n\n    public update(engine: Engine, delta: number) {\n        if (engine.input.keyboard.isHeld(Input.Keys.Up)) {\n            this.vel.y = -this.speed;\n            this._direction = Player.DIRECTION_UP;\n        } else if (engine.input.keyboard.wasReleased(Input.Keys.Up)) {\n            this.vel.y = 0;\n        }\n\n        if (engine.input.keyboard.isHeld(Input.Keys.Down)) {\n            this.vel.y = this.speed;\n            this._direction = Player.DIRECTION_DOWN;\n        } else if (engine.input.keyboard.wasReleased(Input.Keys.Down)) {\n            this.vel.y = 0;\n        }\n\n        if (engine.input.keyboard.isHeld(Input.Keys.Right)) {\n            this.vel.x = this.speed;\n            this._direction = Player.DIRECTION_RIGHT;\n        } else if (engine.input.keyboard.wasReleased(Input.Keys.Right)) {\n            this.vel.x = 0;\n        }\n\n        if (engine.input.keyboard.isHeld(Input.Keys.Left)) {\n            this.vel.x = -this.speed;\n            this._direction = Player.DIRECTION_LEFT;\n        } else if (engine.input.keyboard.wasReleased(Input.Keys.Left)) {\n            this.vel.x = 0;\n        }\n\n        super.update(engine, delta);\n    }\n}\n","import {Actor, CollisionEndEvent, CollisionStartEvent, CollisionType, Engine, ScreenElement} from \"excalibur\";\nimport {ActorArgs} from \"excalibur/dist/Actor\";\nimport {Player} from \"./Player\";\n\nexport class DialogTrigger extends Actor {\n    constructor(private dialogView: ScreenElement, config?: ActorArgs) {\n        super(config);\n\n        this.body.collider.type = CollisionType.Passive;\n        this.on('collisionstart', (event: CollisionStartEvent) => {\n            if (event.other instanceof Player) {\n                this.dialogView.visible = true;\n            }\n        });\n\n        this.on('collisionend', (event: CollisionEndEvent) => {\n            if (event.other instanceof Player) {\n                this.dialogView.visible = false;\n            }\n        });\n    }\n\n    onInitialize(_engine: Engine) {\n\n    }\n}\n","import {Actor, CollisionType, Engine, ScreenElement} from \"excalibur\";\nimport {Player} from \"../Entity/Player\";\nimport {DialogTrigger} from \"../Entity/DialogTrigger\";\n\ninterface IObject {\n    gid: number;\n    height: number;\n    id: number;\n    name: string;\n    rotation: number;\n    type: string;\n    visible: boolean;\n    width: number;\n    x: number;\n    y: number;\n}\n\ninterface ILayer {\n    name: string;\n    type: string;\n    objects?: Array<IObject>;\n}\n\nexport class MapParser {\n    public static OBJECT_LAYER: string = \"objectgroup\";\n    public static TILE_LAYER: string = \"tilelayer\";\n    public readonly layers: Map<string, ILayer> = new Map<string, ILayer>();\n    private objects: Map<string, IObject> = new Map<string, IObject>();\n    private collisions: Map<string, IObject> = new Map<string, IObject>();\n\n    public static PLAYER_NAME = \"player\";\n\n    constructor(private readonly engine: Engine, private data: any) {\n        for (const layerData of data.layers) {\n            this.layers.set(layerData.name, layerData);\n        }\n\n        this.parseObjectLayers();\n    }\n\n    public getLayer(name: string): ILayer | null {\n        const layer = this.layers.get(name);\n\n        return layer ? layer : null;\n    }\n\n    public getCollisionActors(): Array<Actor>\n    {\n        const actors = [];\n\n        for(const collision of this.collisions.values()) {\n            actors.push(new Actor({\n                x: collision.x + (collision.width / 2),\n                y: collision.y + (collision.height / 2),\n                width: collision.width,\n                height: collision.height,\n                collisionType: CollisionType.Fixed\n            }));\n        }\n\n        return actors;\n    }\n\n    public getDialogTriggers(dialogViews: Map<string, ScreenElement>): Array<DialogTrigger> {\n        const dialogTriggers = [];\n        for (const object of this.objects.values()) {\n            if (object.type === 'DialogTrigger') {\n                const dialogView = dialogViews.get(object.name);\n\n                if (dialogView) {\n                    const dialogTrigger = new DialogTrigger(dialogView, {\n                        x: object.x + (object.width / 2),\n                        y: object.y + (object.height / 2),\n                        width: object.width,\n                        height: object.height\n                    });\n\n                    dialogTriggers.push(dialogTrigger);\n                } else {\n                    throw new Error(`No DialogView with name ${object.name} exists`);\n                }\n            }\n        }\n\n        return dialogTriggers;\n    }\n\n    public getPlayer(): Player {\n        const playerData = this.objects.get(MapParser.PLAYER_NAME);\n\n        if (!playerData) {\n            throw new Error(\"No Player found in map.\");\n        }\n\n        return new Player(this.engine, {\n            x: playerData.x,\n            y: playerData.y,\n            width: playerData.width,\n            height: playerData.height,\n        });\n    }\n\n    private parseObjectLayers(): void {\n        for (const layer of this.layers.values()) {\n            if (layer.type === MapParser.OBJECT_LAYER && layer.objects) {\n                if (layer.name.startsWith('object')) {\n                    for (const object of layer.objects) {\n                        this.objects.set(object.name, object);\n                    }\n                } else if (layer.name.startsWith('collision')) {\n                    for (const object of layer.objects) {\n                        this.collisions.set(object.id.toString(), object);\n                    }\n                }\n            }\n        }\n    }\n}\n","import { Player } from \"./Entity/Player\";\nimport { Animation, Engine, Sprite, SpriteSheet, Texture } from \"excalibur\";\n\nexport class PlayerView {\n    private readonly upAnimation?: Animation;\n    private readonly leftAnimation?: Animation;\n    private readonly rightAnimation?: Animation;\n    private readonly downAnimation?: Animation;\n    private readonly idleDownSprite: Sprite;\n    private readonly idleUpSprite: Sprite;\n    private readonly idleLeftSprite: Sprite;\n    private readonly idleRightSprite: Sprite;\n    private static ANIMATION_SPEED = 100;\n\n    constructor(\n        private readonly engine: Engine,\n        private readonly player: Player,\n        private texture: Texture\n    ) {\n        const spriteSheet = new SpriteSheet(this.texture, 3, 4, 16, 16);\n\n        this.downAnimation = spriteSheet.getAnimationByIndices(\n            this.engine,\n            [0, 1, 2],\n            PlayerView.ANIMATION_SPEED\n        );\n        this.leftAnimation = spriteSheet.getAnimationByIndices(\n            this.engine,\n            [3, 4, 5],\n            PlayerView.ANIMATION_SPEED\n        );\n        this.rightAnimation = spriteSheet.getAnimationByIndices(\n            this.engine,\n            [6, 7, 8],\n            PlayerView.ANIMATION_SPEED\n        );\n        this.upAnimation = spriteSheet.getAnimationByIndices(\n            this.engine,\n            [9, 10, 11],\n            PlayerView.ANIMATION_SPEED\n        );\n        this.idleDownSprite = spriteSheet.getSprite(1);\n        this.idleLeftSprite = spriteSheet.getSprite(4);\n        this.idleRightSprite = spriteSheet.getSprite(7);\n        this.idleUpSprite = spriteSheet.getSprite(10);\n\n        this.player.addDrawing(\"up\", this.upAnimation);\n        this.player.addDrawing(\"left\", this.leftAnimation);\n        this.player.addDrawing(\"right\", this.rightAnimation);\n        this.player.addDrawing(\"down\", this.downAnimation);\n        this.player.addDrawing(\"idleUp\", this.idleUpSprite);\n        this.player.addDrawing(\"idleDown\", this.idleDownSprite);\n        this.player.addDrawing(\"idleRight\", this.idleRightSprite);\n        this.player.addDrawing(\"idleLeft\", this.idleLeftSprite);\n\n        this.player.setDrawing(\"idleDown\");\n    }\n\n    public update(): void {\n        if (this.player.vel.x > 0) {\n            this.player.setDrawing(\"right\");\n        } else if (this.player.vel.x < 0) {\n            this.player.setDrawing(\"left\");\n        } else if (this.player.vel.y > 0) {\n            this.player.setDrawing(\"down\");\n        } else if (this.player.vel.y < 0) {\n            this.player.setDrawing(\"up\");\n        } else {\n            if (this.player.direction === Player.DIRECTION_UP) {\n                this.player.setDrawing(\"idleUp\");\n            } else if (this.player.direction === Player.DIRECTION_DOWN) {\n                this.player.setDrawing(\"idleDown\");\n            } else if (this.player.direction === Player.DIRECTION_LEFT) {\n                this.player.setDrawing(\"idleLeft\");\n            } else {\n                this.player.setDrawing(\"idleRight\");\n            }\n        }\n    }\n}\n","import {Label, ScreenElement} from \"excalibur\";\nimport {ContactConfig} from \"../../config\";\n\nexport class ContactDialogView extends ScreenElement\n{\n    private readonly nameLabel: Label;\n    private readonly emailLabel: Label;\n\n   constructor(config: ContactConfig, x: number, y: number) {\n       super({\n           x, y, visible: false\n       });\n       this.nameLabel = new Label(config.name, x, y, 'Arial')\n       this.emailLabel = new Label(config.email, x, y - 30, 'Arial')\n\n       this.add(this.nameLabel);\n       this.add(this.emailLabel);\n   }\n\n   public hide(): void\n   {\n       this.nameLabel.visible = false;\n       this.emailLabel.visible = false;\n   }\n\n    public show(): void\n    {\n        this.nameLabel.visible = true;\n        this.emailLabel.visible = true;\n    }\n}\n","import {Engine, Loadable, ScreenElement, SpriteSheet, Texture} from \"excalibur\";\nimport { TiledResource } from \"@excaliburjs/excalibur-tiled\";\nimport { MapParser } from \"./TiledMap/MapParser\";\nimport { PlayerView } from \"./PlayerView\";\nimport {ContactDialogView} from \"./UI/ContactDialogView\";\nimport {Config} from \"../config\";\n\nexport class World {\n    private readonly level1: TiledResource;\n    private readonly spriteSheets: Map<string, SpriteSheet> = new Map<\n        string,\n        SpriteSheet\n    >();\n    private readonly playerTexture: Texture;\n\n    constructor(private engine: Engine, private config: Config) {\n        this.level1 = new TiledResource(\"/assets/maps/level1.json\");\n        this.playerTexture = new Texture(\"/assets/characters/player.png\");\n    }\n\n    public init(): void {\n        const tileMap = this.level1.getTileMap();\n\n        this.parseMap();\n\n        this.engine.add(tileMap);\n    }\n\n    private parseMap(): void {\n        const data = this.level1.getData();\n\n        const mapParser = new MapParser(this.engine, data);\n        const player = mapParser.getPlayer();\n\n        const dialogViews = new Map<string, ScreenElement>();\n\n        dialogViews.set('openContactDialog', new ContactDialogView(this.config.contact, 50, 50));\n\n        const dialogTriggers = mapParser.getDialogTriggers(dialogViews);\n\n        player.view = new PlayerView(this.engine, player, this.playerTexture);\n\n        this.engine.add(player);\n\n        for (const dialogView of dialogViews.values()) {\n            this.engine.currentScene.add(dialogView);\n        }\n\n        for (const collisionActor of mapParser.getCollisionActors()) {\n           this.engine.add(collisionActor);\n        }\n\n        for (const dialogTrigger of dialogTriggers) {\n            this.engine.add(dialogTrigger);\n        }\n    }\n\n    public getSpriteSheet(name: string): SpriteSheet | null {\n        const spriteSheet = this.spriteSheets.get(name);\n\n        return spriteSheet ? spriteSheet : null;\n    }\n\n    public getLoadableResources(): Array<Loadable> {\n        return [this.level1, this.playerTexture];\n    }\n}\n","export interface ContactConfig {\n    name: string\n    email: string\n}\n\nexport interface SocialConfig {\n    instagram: string\n}\n\nexport interface ProgrammingConfig {\n    github: string\n}\n\nexport interface Config {\n    contact: ContactConfig\n    social: SocialConfig\n    programming: ProgrammingConfig\n}\n\nexport const CONFIG: Config = {\n    contact: {\n        name: 'Arjan Frans',\n        email: 'arjanfrans.com@gmail.com'\n    },\n    social: {\n        instagram: 'arjan.frans'\n    },\n    programming: {\n        github: 'arjanfrans'\n    }\n}\n","import * as ex from 'excalibur'\nimport {Loader} from 'excalibur'\nimport React from \"react\";\nimport {World} from \"./World\";\nimport {CONFIG} from \"../config\";\n\nexport class Game extends React.Component<{}, {}>{\n    public async componentDidMount(): Promise<void>\n    {\n        const engine = new ex.Engine({\n            width: 800,\n            height: 600,\n            canvasElementId: 'game',\n        });\n\n        const world = new World(engine, CONFIG);\n        const loader = new Loader(world.getLoadableResources());\n\n        await engine.start(loader);\n\n        world.init();\n    }\n\n    public render(): React.ReactNode\n    {\n        return <canvas id=\"game\"/>\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {Game} from \"./Game\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Game />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}