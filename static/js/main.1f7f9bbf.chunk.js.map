{"version":3,"sources":["Game/Entity/Player.ts","Game/TiledMap/MapData.ts","Game/World.ts","Game/index.tsx","index.tsx"],"names":["Player","options","width","height","collisionType","CollisionType","Fixed","color","Color","Chartreuse","velocity","engine","delta","input","keyboard","isHeld","Input","Keys","W","Up","this","pos","y","S","Down","D","Right","x","A","Left","Actor","MapData","data","layers","Map","layerData","set","name","layer","get","actors","values","console","log","type","OBJECT_LAYER","objects","object","actor","push","TILE_LAYER","World","level1","TiledResource","tileMap","getTileMap","loadObjectLayer","add","getData","getActors","Game","ex","canvasElementId","world","loader","Loader","getLoadableResources","start","init","id","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6SAOaA,EAAb,kDAGI,WAAYC,GAA0B,IAAD,8BACjC,yCACOA,GADP,IAEIC,MAAO,GACPC,OAAQ,GACRC,cAAeC,gBAAcC,MAC7BC,MAAOC,QAAMC,eARLC,SAAmB,GAEE,EAHzC,mDAakBC,EAAgBC,IACtBD,EAAOE,MAAMC,SAASC,OAAOC,QAAMC,KAAKC,IAAMP,EAAOE,MAAMC,SAASC,OAAOC,QAAMC,KAAKE,OACtFC,KAAKC,IAAIC,GAAKF,KAAKV,SAAWE,IAG9BD,EAAOE,MAAMC,SAASC,OAAOC,QAAMC,KAAKM,IAAMZ,EAAOE,MAAMC,SAASC,OAAOC,QAAMC,KAAKO,SACtFJ,KAAKC,IAAIC,GAAKF,KAAKV,SAAWE,IAG9BD,EAAOE,MAAMC,SAASC,OAAOC,QAAMC,KAAKQ,IAAMd,EAAOE,MAAMC,SAASC,OAAOC,QAAMC,KAAKS,UACtFN,KAAKC,IAAIM,GAAKP,KAAKV,SAAWE,IAG9BD,EAAOE,MAAMC,SAASC,OAAOC,QAAMC,KAAKW,IAAMjB,EAAOE,MAAMC,SAASC,OAAOC,QAAMC,KAAKY,SACtFT,KAAKC,IAAIM,GAAKP,KAAKV,SAAWE,OA3B1C,GAA4BkB,SCefC,EAAb,WAKI,WAAoBC,GAAY,yBAAZA,OAAW,KAFfC,OAA8B,IAAIC,IAEnB,oBACHF,EAAKC,QADF,IAC3B,2BAAqC,CAAC,IAA3BE,EAA0B,QACjCf,KAAKa,OAAOG,IAAID,EAAUE,KAAMF,IAFT,+BALnC,qDAWoBE,GAEZ,IAAMC,EAAQlB,KAAKa,OAAOM,IAAIF,GAE9B,OAAOC,GAAgB,OAf/B,kCAoBQ,IADJ,EACUE,EAAS,GADnB,cAGwBpB,KAAKa,OAAOQ,UAHpC,IAGI,2BAA0C,CAAC,IAAhCH,EAA+B,QAEtC,GADAI,QAAQC,IAAIL,GACRA,EAAMM,OAASb,EAAQc,cAAgBP,EAAMQ,QAAS,CAAC,IAAD,gBACjCR,EAAMQ,SAD2B,IACtD,2BAAoC,CAAC,IAA1BC,EAAyB,QAChC,GAAoB,WAAhBA,EAAOH,KAAmB,CAC1B,IAAMI,EAAQ,IAAIhD,EAAO,CACrB2B,EAAGoB,EAAOpB,EACVL,EAAGyB,EAAOzB,IAGdkB,EAAOS,KAAKD,KARkC,iCALlE,8BAmBI,OAAOR,MAtCf,KAAaT,EACKc,aAAuB,cAD5Bd,EAEKmB,WAAqB,YCpBhC,IAAMC,EAAb,WAGI,WAAoBxC,GAAiB,yBAAjBA,SAAgB,KAFnByC,YAEmB,EAChChC,KAAKgC,OAAS,IAAIC,gBAAc,4BAJxC,mDAQQ,IAAMC,EAAUlC,KAAKgC,OAAOG,aAE5BnC,KAAKoC,kBAELpC,KAAKT,OAAO8C,IAAIH,KAZxB,wCAiBQ,IADJ,EACUtB,EAAOZ,KAAKgC,OAAOM,UAInBlB,EAFU,IAAIT,EAAQC,GAEL2B,YAL3B,cAOwBnB,GAPxB,IAOI,2BAA4B,CAAC,IAAlBQ,EAAiB,QACxB5B,KAAKT,OAAO8C,IAAIT,IARxB,iCAhBJ,6CA8BQ,MAAO,CACH5B,KAAKgC,YA/BjB,KCCaQ,EAAb,6SAGcjD,EAAS,IAAIkD,SAAU,CACzB3D,MAAO,IACPC,OAAQ,IACR2D,gBAAiB,SAGfC,EAAQ,IAAIZ,EAAMxC,GAClBqD,EAAS,IAAIC,SAAOF,EAAMG,wBAVxC,SAYcvD,EAAOwD,MAAMH,GAZ3B,OAcQD,EAAMK,OAdd,gIAmBQ,OAAO,4BAAQC,GAAG,aAnB1B,GAA0BC,IAAMC,WCAhCC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.1f7f9bbf.chunk.js","sourcesContent":["import {Actor, CollisionType, Color, Engine, Input} from \"excalibur\";\n\ninterface IPlayerOptions {\n    x: number;\n    y: number;\n}\n\nexport class Player extends Actor {\n    public readonly velocity: number = 0.1;\n\n    constructor(options: IPlayerOptions) {\n        super({\n            ...options,\n            width: 20,\n            height: 20,\n            collisionType: CollisionType.Fixed,\n            color: Color.Chartreuse\n        });\n    }\n\n    public update(engine: Engine, delta: number) {\n        if (engine.input.keyboard.isHeld(Input.Keys.W) || engine.input.keyboard.isHeld(Input.Keys.Up)) {\n            this.pos.y -= this.velocity * delta\n        }\n\n        if (engine.input.keyboard.isHeld(Input.Keys.S) || engine.input.keyboard.isHeld(Input.Keys.Down)) {\n            this.pos.y += this.velocity * delta\n        }\n\n        if (engine.input.keyboard.isHeld(Input.Keys.D) || engine.input.keyboard.isHeld(Input.Keys.Right)) {\n            this.pos.x += this.velocity * delta\n        }\n\n        if (engine.input.keyboard.isHeld(Input.Keys.A) || engine.input.keyboard.isHeld(Input.Keys.Left)) {\n            this.pos.x -= this.velocity * delta\n        }\n    }\n}\n","import {Actor} from \"excalibur\";\nimport {Player} from \"../Entity/Player\";\n\ninterface IObject {\n    gid: number;\n    height: number;\n    id: number;\n    name: string;\n    rotation: number;\n    type: string;\n    visible: boolean\n    width: number;\n    x: number;\n    y: number;\n}\n\ninterface ILayer {\n    name: string;\n    type: string;\n    objects?: Array<IObject>\n}\n\nexport class MapData {\n    public static OBJECT_LAYER: string = 'objectgroup';\n    public static TILE_LAYER: string = 'tilelayer';\n    public readonly layers: Map<string, ILayer> = new Map<string, ILayer>()\n\n    constructor(private data: any) {\n        for (const layerData of data.layers) {\n            this.layers.set(layerData.name, layerData);\n        }\n    }\n\n    public getLayer(name: string): ILayer|null\n    {\n        const layer = this.layers.get(name);\n\n        return layer ? layer : null;\n    }\n\n    public getActors(): Array<Actor>\n    {\n        const actors = [];\n\n        for (const layer of this.layers.values()) {\n            console.log(layer)\n            if (layer.type === MapData.OBJECT_LAYER && layer.objects) {\n                for (const object of layer.objects) {\n                    if (object.type === 'Player') {\n                        const actor = new Player({\n                            x: object.x,\n                            y: object.y\n                        });\n\n                        actors.push(actor);\n                    }\n                }\n            }\n        }\n\n        return actors;\n    }\n}\n","import {Engine, Loadable} from \"excalibur\";\nimport {TiledResource} from \"@excaliburjs/excalibur-tiled\";\nimport {MapData} from \"./TiledMap/MapData\";\n\nexport class World {\n    private readonly level1: TiledResource;\n\n    constructor(private engine: Engine) {\n        this.level1 = new TiledResource(\"/assets/maps/level1.json\");\n    }\n\n    public init(): void {\n        const tileMap = this.level1.getTileMap();\n\n        this.loadObjectLayer();\n\n        this.engine.add(tileMap);\n    }\n\n    private loadObjectLayer(): void\n    {\n        const data = this.level1.getData();\n\n        const mapData = new MapData(data);\n\n        const actors = mapData.getActors();\n\n        for (const actor of actors) {\n            this.engine.add(actor);\n        }\n    }\n\n    public getLoadableResources(): Array<Loadable>\n    {\n        return [\n            this.level1\n        ]\n    }\n}\n","import * as ex from 'excalibur'\nimport {Loader} from 'excalibur'\nimport React from \"react\";\nimport {World} from \"./World\";\n\nexport class Game extends React.Component<{}, {}>{\n    public async componentDidMount(): Promise<void>\n    {\n        const engine = new ex.Engine({\n            width: 800,\n            height: 600,\n            canvasElementId: 'game',\n        });\n\n        const world = new World(engine);\n        const loader = new Loader(world.getLoadableResources());\n\n        await engine.start(loader);\n\n        world.init();\n    }\n\n    public render(): React.ReactNode\n    {\n        return <canvas id=\"game\"/>\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {Game} from \"./Game\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Game />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}